// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/BelyaevEI/GophKeeper/server/internal/storage/userdb (interfaces: Store)

// Package dbmocks is a generated GoMock package.
package dbmocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CheckUniqueLogin mocks base method.
func (m *MockStore) CheckUniqueLogin(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUniqueLogin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUniqueLogin indicates an expected call of CheckUniqueLogin.
func (mr *MockStoreMockRecorder) CheckUniqueLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUniqueLogin", reflect.TypeOf((*MockStore)(nil).CheckUniqueLogin), arg0, arg1)
}

// GetPassword mocks base method.
func (m *MockStore) GetPassword(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockStoreMockRecorder) GetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockStore)(nil).GetPassword), arg0, arg1)
}

// GetSecretKey mocks base method.
func (m *MockStore) GetSecretKey(arg0 context.Context, arg1 uint32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretKey", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretKey indicates an expected call of GetSecretKey.
func (mr *MockStoreMockRecorder) GetSecretKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretKey", reflect.TypeOf((*MockStore)(nil).GetSecretKey), arg0, arg1)
}

// GetUserID mocks base method.
func (m *MockStore) GetUserID(arg0 context.Context, arg1 string) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockStoreMockRecorder) GetUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockStore)(nil).GetUserID), arg0, arg1)
}

// SaveDataNewUser mocks base method.
func (m *MockStore) SaveDataNewUser(arg0 context.Context, arg1, arg2, arg3 string, arg4 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDataNewUser", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDataNewUser indicates an expected call of SaveDataNewUser.
func (mr *MockStoreMockRecorder) SaveDataNewUser(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDataNewUser", reflect.TypeOf((*MockStore)(nil).SaveDataNewUser), arg0, arg1, arg2, arg3, arg4)
}
